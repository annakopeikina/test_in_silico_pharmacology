## SEARCH
# def search_by_trade_name(trade_name):
'''Функция принимает торговое название препарата trade_name в качестве аргумента,
    отправляет запрос к API для поиска информации о препарате по его торговому названию.
    Если препарат найден, функция возвращает его латинское название, брутто формулу и 
    химическое название. В случае, если препарат не найден, функция возвращает None 
    для каждого из трех параметров. '''

# def search_by_latin_name(latin_name):
'''Функция принимает латинское название препарата latin_name в качестве аргумента и 
    отправляет запрос к API для поиска информации о препарате по его латинскому названию. 
    Если препарат найден, функция возвращает его брутто формулу и химическое название. 
    Если препарат не найден, функция возвращает None для обоих параметров.'''

# def search_by_brutto_formula(brutto_formula):
'''Функция принимает брутто формулу препарата brutto_formula в качестве аргумента и 
    отправляет запрос к API для поиска информации о препарате по его брутто формуле. 
    Если препарат найден, функция возвращает его химическое название. Если препарат не найден, 
    функция возвращает None.'''

# def search_drug(drug_name):
'''Это вспомогательная функция, которая принимает название препарата drug_name 
    и последовательно вызывает другие функции для поиска информации о препарате. 
    Если информация о препарате найдена, она возвращает латинское название, 
    брутто формулу и химическое название. Если информация о препарате не найдена, 
    возвращает None для каждого параметра.'''


## PHARMACODYNAMICS
# update_pharmacodynamics(drug_name, pharmacodynamics_info):
''' (обновление данных о фармакодинамике): Эта функция принимает два аргумента - 
drug_name (название препарата) и pharmacodynamics_info (информация о фармакодинамике препарата)
. Она обновляет записи о фармакодинамике в базе данных SQLite.'''

# update_binding(drug_name, binding_info) 
'''(обновление данных о связывании): Данная функция принимает два аргумента - 
drug_name (название препарата) и binding_info (информация о связывании препарата). 
Она обновляет записи о связывании в базе данных SQLite.'''

# run_command(command) (выполнение команды): 
'''Функция принимает один аргумент - command (команда в виде строки) и выполняет 
эту команду в командной оболочке. Возвращает результат выполнения команды в виде 
кортежа (stdout, stderr).'''

# get_pharmacodynamics_info_online(drug_name): 
'''(получение данных о фармакодинамике из онлайн источника): Эта функция принимает 
один аргумент - drug_name (название препарата) и отправляет запрос к онлайн источнику 
(например, DrugBank) для получения информации о фармакодинамике препарата. Возвращает 
информацию о фармакодинамике или None, если информация не найдена.'''

# get_binding_info_online(drug_name):
''' (получение данных о связывании из онлайн источника): Данная функция также принимает 
один аргумент - drug_name (название препарата) и отправляет запрос к онлайн источнику 
(например, BindingDB) для получения информации о связывании препарата. Возвращает информацию 
о связывании или None, если информация не найдена.'''

# visualize_data(pharmacodynamics_info, binding_info)
''' (визуализация данных): Функция принимает два аргумента - pharmacodynamics_info 
(информация о фармакодинамике) и binding_info (информация о связывании). Она выводит информацию 
о фармакодинамике и связывании, а также создает график для наглядного представления данных'''


## DATA HANDLING
# def save_data_to_file(data, filename):
""" Сохраняет данные в файл.Args:
data: Данные для сохранения.
filename: Имя файла, в который будут сохранены данные."""

# def append_data_to_file(data, filename):
""" Дописывает данные в конец файла.
    Args:
        data: Данные для дописывания.
        filename: Имя файла, в который будут дописаны данные."""

# def overwrite_file(data, filename):
"""Перезаписывает файл данными.
    Args:
        data: Данные для записи.
        filename: Имя файла, который будет перезаписан данными."""
